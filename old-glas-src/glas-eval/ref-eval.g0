open prims
import list as l

; list of all single-symbol ops
data symbolic-ops-list [
    l0 'copy
    li 'drop
    li 'swap
    li 'eq
    li 'fail
    li 'eff
    li 'get
    li 'put
    li 'del
    li # end of list
]

prog is-program-op [ ; Program -- | FAILURE
    symbolic-ops-list value-in-list
]

; split-program : Program -- List<SubProgram> | FAILURE
prog split-program [
    try [is-program-op] then [] else [

    ]

]

; is-program: Program -- | FAILURE
; This accepts the input if it represents a program.
prog is-program [
    ; use list of programs as queue
    list-singleton

    ; for each program in stack, split into fragments, add to stack
    while [popr] do [split-program join]

    ; delete empty stack
    drop-empty-list
]


; eval: List Program -- List
; This is a simple reference implementation, via direct interpretation.


; eval-k: List Program -- List Continuation
