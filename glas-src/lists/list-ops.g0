open prims

# pushl (V L -- V:L)
prog pushl [0 0b1 put 0b0 put]

# popl (V:L -- V L)
prog popl [copy 0b0 get swap 0b1 get]

prog p-foreach [[popl] swap p-dip p-while-do [0 eq] p-seq]

# each ([Op] => (ABC -- A Op B Op C Op))
macro foreach [p-foreach]

# rev-append (CBA DEF -- ABCDEF)
prog rev-append [swap [swap pushl] foreach]

# rev  (ABCDEF -- FEDCBA)
prog rev [0 rev-append]
assert ["hello" rev "olleh" eq]

# append (ABC DEF -- ABCDEF)
prog append [[rev] dip rev-append]
assert ["abc" "def" append "abcdef" eq]

data l0 [0]
prog l1 [l0 pushl]
prog l2 [l1 pushl]
prog l3 [l2 pushl]
prog l4 [l3 pushl]
prog l5 [l4 pushl]
prog l6 [l5 pushl]
prog l7 [l6 pushl]
assert [0x6e 0x6f 0x6d 0x6e 0x6f 0x6d l3 "nom" eq]

# pushr (L V -- L:V)
prog pushr-raw [l1 append]
assert ["pin" 0x67 pushr-raw "ping" eq]

# popr (L:V -- L V)
prog popr-raw [rev popl rev swap]
assert ["pint" popr-raw 0x74 eq "pin" eq]


# todo: annotate pushr, popr for acceleration


# prog li [pushr]


# todo: split (requires natural numbers) 


