# The glas program model doesn't have any built-in ops for numbers.
# However, most of these operations will be optionally accelerated.

open prims
import bits-basics as bb
import bits as b
from [bb] import type-nat, repeat

prog is-nat [b/is-bits [0b0 get] reject]

prog is-pos  [type-nat [0b1 get] verify]
prog is-zero [type-nat 0 eq1]


prog increment [type-nat bb/int-increment]
prog decrement [type-nat [0b1 get] verify bb/int-decrement]

# clarity functions
prog revnat-increment [bb/revint-increment]
prog revnat-lsb-pop [[bb/bits-pop][0b0 swap]try-else]
prog revnat-mul2-add1 [0b1 bb/bits-prefix]
prog revnat-mul2 [[0 eq1][0b0 bb/bits-prefix]try-else]

prog add-rev [
    [0] dip2 # introduce accumulator
    # stack: Acc A B
    # reversed A,B so lsb is first bit.

    # repeat until either number is zero
    [[0 eq] [swap 0 eq] try-else] 
    [ 
        [0b0 get]
        [ # xaaa + 0bbb => x(aaa + bbb)
          [
            bb/bits-pop             
            [bb/bits-prefix] dip
          ] dip
        ]
        [0b1 get
          [
            [0b0 get]
            [ # 0aaa + 1bbb => 1(aaa + bbb)
              [0b1 bb/bits-prefix] dip
            ] 
            [ # 1aaa + 1bbb => (1aaa + 1) + (1bbb - 1)) 
              #             => (0(aaa+1)) + (0bbb) 
              #             => 0((aaa+1) + bbb)
              0b1 get revnat-increment  # 1aaa => (aaa+1)
              [0b0 bb/bits-prefix] dip 
            ]
            try-then-else
          ] dip
        ]
        try-then-else
    ]
    until-do

    # add acc bits to unmodified high bits.
    # (preserves reversed bit order.)
    swap
    bb/bits-reverse-append
]

# test add, commutative of add
prog test-add-rev [
    copy3
    [add-rev] dip eq
    [swap add-rev] dip eq
]

assert [0b101 0b0011 0b10001 test-add-rev]

prog add-impl [
    # type declarations
    [type-nat] dip type-nat

    # setup - reverse both ints
    [bb/bits-reverse] dip    
    bb/bits-reverse         

    # add reversed
    add-rev

    # reverse result to a normal int
    bb/bits-reverse
]

# add two natural numbers (possibly accelerated)
prog add [[add-impl] 'nat-add p-accel-opt apply]

prog test-add [
    copy3 [add-impl] dip eq
    copy3 [swap add-impl] dip eq
    copy3 [add] dip eq
          [swap add] dip eq
]

assert [12345 87654 99999 test-add]
assert [1000 9000 10000 test-add]
assert [1234 5678 6912 test-add]
assert [314 710 1024 test-add]
assert [
    0x876543210FEDCBA876543210FEDCBA876543210FEDCBA
     0x89ABCDEF012345789ABCDEF012345789ABCDEF012345 0b111 bb/bits-prefix
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    test-add
]


prog sub-rev [
    [0] dip2
    [0 eq] 
    [
        [0b0 get]
        [ # xaaa - 0bbb => x(aaa - bbb)
          [ bb/bits-pop
            [bb/bits-prefix] dip
          ] dip
        ]
        [0b1 get
         [[0b0 get] dip]
         [ # 0aaa - 1bbb => (1+0aaa) - (1+1bbb)
           #             => 1aaa - 0(1+bbb) 
           #             => 1(aaa - (1+bbb))
           revnat-increment
           [0b1 bb/bits-prefix] dip2
         ]
         [ # 1aaa - 1bbb => 0(aaa - bbb)
            [0b1 get
             [0b0 bb/bits-prefix] dip
            ] dip
         ]
         try-then-else
        ]
        try-then-else
    ]
    until-do

    # special case: may need to shrink result
    # if high bit was reached.
    [0 eq][[0b0 get] loop 0] try-then

    # reverse the accumulator
    swap
    bb/bits-reverse-append 
]

assert [0b001 0b1 sub-rev 0b11 eq]
assert [0b001 0b001 sub-rev 0 eq]
assert [[0b1 0b01 sub-rev] reject]

prog sub-impl [
    [type-nat] dip type-nat
    [bb/bits-reverse] dip bb/bits-reverse
    sub-rev
    bb/bits-reverse
]

# subtract natural numbers.
#  This fails if difference would be negative.
prog sub [[sub-impl] 'nat-sub p-accel-opt apply]

prog test-sub [
    copy3 [sub-impl] dip eq
    copy3 [sub] dip eq

    # A - B = C implies A - C = B; swap B, C then test
    copy3 swap [sub-impl] dip eq
    copy3 swap [sub] dip eq

    [0 eq eq] # if expect zero, check that args are equal
    [ # otherwise reject swapped subtractions
      drop swap 
      [sub-impl] reject
      [sub] reject
      drop2
    ] try-else
]

assert [8 5 3 test-sub]
assert [1024 314 710 test-sub]
assert [99999 12345 87654 test-sub]
assert [10000 1001 8999 test-sub]
assert [1234 1234 0 test-sub]

assert [
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    0x876543210FEDCBA876543210FEDCBA876543210FEDCBA
     0x89ABCDEF012345789ABCDEF012345789ABCDEF012345 0b111 bb/bits-prefix
    test-sub
]


prog mul-nz-rev [
    [0 0] dip2 # introduce Shift and Sum accumulators
    # stack: Shift Sum X Y(rem)
    
    [0 eq] # stop when Y(rem) is zero.
    [ 
        # add X to Sum if low bit of Y(rem) is 1
        # then remove low bit of Y(rem)
        [0b0 get]
        [0b1 get [copy [add-rev] dip] dip]
        try-else

        # move lsb from Sum to Shift (logically multiply X by 2)
        [revnat-lsb-pop [bb/bits-prefix] dip] dip2
    ]
    until-do

    # final step is to move Shift bits back onto tail of Sum.
    drop swap bb/bits-reverse-append
]

assert [0b011 0b101 mul-nz-rev 0b01111 eq]

prog mul-impl [
    [type-nat] dip type-nat
    [[0 eq][swap 0 eq]try-else]
    [drop 0]
    [
        [bb/bits-reverse] dip bb/bits-reverse
        mul-nz-rev
        bb/bits-reverse
    ]
    try-then-else
]

prog mul [[mul-impl] 'nat-mul p-accel-opt apply]

prog test-mul [
    copy3 [mul-impl] dip eq
    copy3 [swap mul-impl] dip eq
    copy3 [mul] dip eq
          [swap mul] dip eq
]

assert [42 0 0 test-mul]
assert [67 83 5561 test-mul]
assert [7757 3373 26164361 test-mul]

# binary long division algorithm
prog divmod-impl [
    [type-nat] dip type-nat
    [0 eq] reject  # fail on divide-by-zero
    bb/bits-reverse swap
    [0 0] dip2  # stack: Q(rev) R(rev) D(rev) N(normal)
    # N is not reversed; we'll be taking bits from msb.

    [0 eq]
    [
        # move msb of N to lsb of R
        [0b0 get]
        [[revnat-mul2] dip2]
        [0b1 get [revnat-mul2-add1] dip2]
        try-then-else

        [   # if R is greater or equal to D:
            #  subtract D from R
            #  shift '1' bit into lsb of Q
            # otherwise:
            #  multiply Q by 2 (shift '0' bit into lsb if Q not zero)
            [copy [sub-rev] dip]
            [[revnat-mul2-add1] dip2]
            [[revnat-mul2] dip2]
            try-then-else
        ] dip   # hide N
    ] 
    until-do
    drop [bb/bits-reverse] dip bb/bits-reverse
]

# divide two natural numbers  N D -- Q R
#   such that (Q*D)+R = N
prog divmod [[divmod-impl] 'nat-divmod p-accel-opt apply]

prog test-divmod [
    pair
    copy3 [divmod-impl pair] dip eq
          [divmod pair] dip eq
]

assert [17 5 3 2 test-divmod]
assert [63 6 10 3 test-divmod]
assert [63 7 9 0 test-divmod]
assert [63 8 7 7 test-divmod]
assert [10003087 3373 2965 2142 test-divmod]
assert [10003087 10003087 1 0 test-divmod]
assert [10003087 1 10003087 0 test-divmod]
assert [9 10 0 9 test-divmod]
assert [0 3 0 0 test-divmod]

prog div-impl [divmod drop]
prog mod-impl [divmod swap drop]

prog div [[div-impl] 'nat-div p-accel-opt apply]
prog mod [[mod-impl] 'nat-mod p-accel-opt apply]

prog gt-impl [[sub 0b1 get] verify]
prog gte-impl [[sub] verify]

# number comparisons
#
#  gte - greater than or equal to
#  gt - greater than
#  lte - less than or equal to
#  lt - less than
#
# These operations fail if the comparison is not true, otherwise
# return their inputs unmodified.
#
prog gte [[gte-impl] 'nat-gte p-accel-opt apply]
prog gt [[gt-impl] 'nat-gt p-accel-opt apply]
prog lte [swap gte]
prog lt [swap gt]

prog test-gte [
    [gte] verify
    [gte-impl] verify
    [lt] reject

    [[eq] reject]
    [
        [gt] verify
        [gt-impl] verify
        [lte] reject
    ]
    [
        [gt] reject
        [gt-impl] reject
        [lte] verify
    ]
    try-then-else
    drop2
]
assert [9 8 test-gte]
assert [8 8 test-gte]
assert [12345 0 test-gte]
assert [0x8000000000000000000000000000000000
        0x8000000000000000000000000000000000
        test-gte
]
assert [0x8000000000000000000010000000000000
        0x8000000000000000000000000000000000
        test-gte
]


# convert a fixed-width 'word' to a nat by removing
# the leading zeroes prefix. This works for words of
# any length, such as bytes or 32-bit words.
prog of-word [bb/type-bits [0b0 get] loop type-nat]

export type-nat as type
     , repeat
     , increment, decrement 
     , add, sub, mul, divmod, div, mod
     , gt, gte, lt, lte
     , of-word
