open prims
import nat as n

data empty [0]

# list each ([Op] => (ABC... -- A Op B Op C Op ...))
# As each-sc, but fails if not every element is processed.
prog p-each [ p-dip [unpair] swap p-while-do [empty eq] p-suffix ]
macro each [p-each]

# thoughts: I could implement p-each in terms of p-each-sc, but I
# prefer to lift the operation out of the hierarchical transaction
# such that failure is handled more directly.

prog is-list-impl [[[drop] each] verify]
assert ["abc" is-list-impl "abc" eq]
assert [['abc is-list-impl] reject]

# is-list       Value -- List | FAIL
#
# Verify that input is a list. Does not modify data,
# but may adjust list representation under the hood.
#
prog is-list [[is-list-impl] 'list-verify p-accel apply]

assert ["abc" copy is-list eq]
assert [['abc is-list] reject]

# insist that top item on the data stack is a valid list
# and optimize runtime representation for list operators 
prog list-type [
    # todo: checkable type annotation
    [is-list] [halt-type-error] try-else
]

# pushl (V L -- V:L)
prog pushl-impl [pair list-type]
prog pushl [[pushl-impl] 'list-pushl p-accel-opt apply]

# popl (V:L -- V L)
prog popl-impl [unpair list-type]
prog popl [[popl-impl] 'list-popl p-accel-opt apply]

assert [0x61 "bcdef" pushl "abcdef" eq]
assert ["abcdef" popl "bcdef" eq 0x61 eq]

# list reverse-append (DEF CBA -- ABCDEF)
#   O(N) - not accelerated
prog reverse-append [[swap pair] each list-type]
assert ["def" "cba" reverse-append "abcdef" eq]

# list reverse (ABCDEF -- FEDCBA)
#  O(N) even if accelerated, but acceleration might make this lazy.
prog reverse [[empty] dip reverse-append]
assert ["hello" reverse "olleh" eq]

prog append-impl [swap reverse reverse-append]
assert ["abc" "def" append-impl "abcdef" eq]

# append (ABC DEF -- ABCDEF)
#
# Concatenate two lists. This operation is accelerated and should be
# O(log(min(N,M))) on the smaller of the two lists, assuming runtime
# representation of larger lists is based on finger tree ropes.
#
prog append [[append-impl] 'list-append p-accel apply]

prog test-append [
    copy3 
    [append-impl] dip eq
    [append] dip eq
]
assert ["" "abc" "abc" test-append]
assert ["abc" "" "abc" test-append]
assert ["abc" "def" "abcdef" test-append]

prog length-impl [[0] dip [drop n/increment] each]
assert ["abcdef" length-impl 6 eq]

# useful aliases
prog suffix [append]
prog prefix [swap suffix]

# length (List -- N)
# returns length of input list 
#
# This function is accelerated, should be O(1) in cases where
# a list runtime representation (e.g. array or rope) is used.
prog length [[length-impl] 'list-length p-accel apply]

prog test-length [
    copy2
    [length-impl] dip eq
    [length] dip eq
]

assert ["" 0 test-length]
assert ["omn-nom" 7 test-length]
assert ["omn " 10 [copy append] n/repeat 4096 test-length]

prog take-impl [
    [empty] dip2
    [unpair [swap pair] dip] n/repeat
    drop reverse 
]
prog skip-impl [
    [unpair swap drop] n/repeat
    list-type
]

assert ["ping" 3 take-impl "pin" eq]
assert ["ping" 3 skip-impl "g" eq]

# list take     List N -- List
#
# Return initial sublist of length N. Fails if list is shorter than N.
# This operation is accelerated. Should be O(log(N)) on the runtime
# representation of a large list.
#
prog take [[take-impl] 'list-take p-accel apply]

# list skip     List N -- List
# 
# Return remaining list after removing first N elements. Fails if list
# is shorter than N elements. This operation is accelerated and should
# be O(log(N)) on the runtime representation of a large list.
#
prog skip [[skip-impl] 'list-skip p-accel apply]

prog test-take [
    copy3
    [take-impl] dip eq
    [take] dip eq
]
prog test-skip [
    copy3
    [skip-impl] dip eq
    [skip] dip eq
]

assert ["" 0 "" test-take]
assert ["profound" 3 "pro" test-take]
assert ["" 0 "" test-skip]
assert ["profound" 3 "found" test-skip]

# cut         List N -- List List
#  same as applying both take and skip
prog cut [copy2 skip [take] dip]
assert [
    "nowhere" 3 cut pair
    "now" "here" pair 
    eq
]

# item      (List A) N -- A
#
# access the Nth item in a list. This is the
# same as skipping N items, taking the head.
prog item-impl [skip popl drop]
prog item [[item-impl] 'list-item p-accel-opt apply]

prog test-item [
    copy3 [item-impl] dip eq
          [item] dip eq 
]
assert ["hello" 0 0x68 test-item]
assert ["hello" 1 0x65 test-item]
assert ["hello" 4 0x6F test-item]
assert ["hello" 5 [item] reject [item-impl] reject drop2]

prog pushr-impl [l1 append]

# pushr (L V -- L:V)
#
# Add an element to the right end of a list. This operation is accelerated
# and should be O(1) on the accelerated runtime representation of lists.
prog pushr [[pushr-impl] 'list-pushr p-accel-opt apply]

prog test-pushr [
    copy3
    [pushr-impl] dip eq
    [pushr] dip eq
]
assert ["pin" 0x67 "ping" test-pushr]

prog popr-impl [
    copy length n/decrement
    cut unpair 0 eq
]
assert ["pint" popr-impl 0x74 eq "pin" eq]

# popr (L:V -- L V)
#
# Separate rightmost element from a list. This operation is accelerated
# and should be O(1) on the accelerated runtime reprsentation of lists.
#
prog popr [[popr-impl] 'list-popr p-accel-opt apply]

prog test-popr [
    pair copy2 
    [popr-impl pair] dip eq
    [popr pair] dip eq
]
assert ["ping" "pin" 0x67 test-popr]

# li    alias for 'pushr'
#
# Intended to support pseudo-literal construction of lists.
#
#   l0 "this was a triumph"
#   li "making a note here,"
#   li "  huge success!"
#   li " -- GlaDOS" 
#   li unlines
#
# Though, it would be better to design a data language rather
# than attempt to embed significant volumes of data into g0.
#
prog li [pushr]

# MORE LOOPS!!!
#
# short-circuiting loops
# reverse ordered loops
# mapping over a list
# filter/flatmap over a list
# zips combining items from two or more lists
# sorting of lists 
#  

# list each-sc  ((S * List A) * [(S * A) -> S | FAIL]) -> (S * List A)
# 
# Short-circuiting loop over a list that processes each element in order,
# returns the unprocessed remainder of the list in case the operation fails.
prog p-each-sc [p-dip [unpair] p-prefix p-loop]
macro each-sc [p-each-sc]

assert [
    0
    1 2 3 -4 5 6 l6
    [[0b1 get] verify swap pair] each-sc
    pair
    3 2 1 l3
    -4 5 6 l3
    pair 
    eq
]

# p-each-rev-sc
# each-rev-sc
#
# A reverse-order each-sc. Returns the remaining prefix of the list at 
# the top of the stack upon operation failure. If the remaining prefix 
# is empty, then there were no failures.
prog p-each-rev-sc [ 
    p-dip [popr swap] p-prefix p-loop 
    [list-type] p-prefix 
]
macro each-rev-sc [p-each-rev-sc]
assert [
    0
    1 2 3 -4 5 6 l6
    [[0b1 get] verify n/add] each-rev-sc
    pair
    11
    1 2 3 -4 l4
    pair
    eq
]

# p-each-rev    [(S * A) -> S] -> [(S * List A) -> S]
#   each-rev    ABC [Op] => C Op B Op A Op
# 
# A reverse-order 'each' operation. Operates from end of list.
prog p-each-rev [
    p-dip [popr swap] swap p-while-do 
    [list-type] p-prefix [empty eq] p-suffix
]
macro each-rev [p-each-rev]
assert [0 "hello" [swap pair] each-rev "hello" eq]

# p-map        [(S * A) -> (S * B)] -- [(S * List A) -> (S * List B)]
# map          ((S * List A) * [(S * A) -> (S * B)]) -> (S * List B)
#
# Apply an operation to each element of a list. Failures are not permitted.
prog p-map [
    p-dip [swap] p-prefix [swap pushr] p-suffix
    p-each
    [[empty] dip] p-prefix
]
macro map [p-map]

assert [
    1 2 3 4 l4
    [3 n/mul] map
    3 6 9 12 l4 eq
]

# p-map-sc     [(S * A) -> (S * B) | FAIL] -- [(S * List A) -> ((S * List B) * List A)]
#   map-sc     ((S * List A) * [(S * A) -> (S * B) | FAIL]) -> ((S * List B) * List A) 
#
# Map over a list until a failure is reached. Returns the mapped prefix and the unprocessed
# suffix of the list.
prog p-map-sc [
    p-dip [swap] p-prefix [swap pushr] p-suffix
    p-each-sc
    [[empty] dip] p-prefix 
]
macro map-sc [p-map-sc]

assert [
    1 2 3 4 -5 6 l6
    [[0b1 get] verify 3 n/mul] map-sc
    pair
    3 6 9 12 l4 
    -5 6 l2 
    pair eq
]

# p-map-rev
#   map-rev
prog p-map-rev [
    p-dip [swap] p-prefix [pushl] p-suffix
    p-each-rev
    [[empty] dip] p-prefix
]
macro map-rev [p-map-rev]

# p-map-rev-sc
#   map-rev-sc
prog p-map-rev-sc [
    p-dip [swap] p-prefix [pushl] p-suffix
    p-each-rev-sc
    [[empty] dip] p-prefix
]
macro map-rev-sc [p-map-rev-sc]


# p-mapf    [(S * A) -> (S * List B)] -- [(S * List A) -> (S * List B)]
#   mapf
# 
# Map over a list while filtering and flattening the result. The operation
# should produce a list for each element in the input list. These lists are
# concatenated. Failure for any operation causes the entire mapf to fail.
#
prog p-mapf [
    p-dip [swap] p-prefix [prefix] p-suffix
    p-each
    [[empty] dip] p-prefix
]
macro mapf [p-mapf]

assert [
    "hello"
    [l1 "." append] mapf
    "h.e.l.l.o." eq
]

# p-mapf-sc 
#   mapf-sc
#
# Short-circuiting implementations of mapf. When the operation fails, the
# remaining list is returned at the top of the list. If the remaining list
# is empty, then there were no operation failures.
# p-mapf-sc
prog p-mapf-sc [
    p-dip [swap] p-prefix [prefix] p-suffix
    p-each-sc
    [[empty] dip] p-prefix
]
macro mapf-sc [p-mapf-sc]

# p-mapf-rev
# mapf-rev
prog p-mapf-rev [
    p-dip [swap] p-prefix [suffix] p-suffix
    p-each-rev
    [[empty] dip] p-prefix
]
macro mapf-rev [p-mapf-rev]

# p-mapf-rev-sc
# mapf-rev-sc
prog p-mapf-rev-sc [
    p-dip [swap] p-prefix [suffix] p-suffix
    p-each-rev-sc
    [[empty] dip] p-prefix
]
macro mapf-rev-sc [p-mapf-rev-sc]



# ZIPS (map over two or more lists)
#
# Easiest to model as operating on a list of lists.

# popl-many     ListOfLists -- Firsts Suffixes
#  take first item from each item in a list of lists to form a
#  new list and a remaining list-of-lists. 
prog popl-many [ 
    [empty empty] dip # accumulators
    [popl [swap [swap pushl] dip] dip swap pushl] each-rev
]
assert [
    "foo" "bar" "baz" l3
    popl-many 
    pair
    "fbb" 
    "oo" "ar" "az" l3 
    pair eq
]

# popr-many     ListOfLists -- Prefixes Lasts
prog popr-many [
    [empty empty] dip # accumulators
    [popr [swap [swap pushl] dip] dip swap pushl] each-rev
]
assert [
    "foo" "bar" "baz" l3
    popr-many
    pair
    "fo" "ba" "ba" l3 
    "orz" 
    pair eq
]

# p-zip-each-rem
#
# Process columns from a row-major list of lists. Returns the 
# remaining lists after at least one input list is empty. This
# is mostly relevant in case not all lists are the same length.
prog p-zip-each-rem [
    # process first elements of each list
    [popl-many] swap p-dip p-while-do
]

# p-zip-each 
#
# Applies given operation to columns in a row-major list of lists.
# fails if not all lists have the same length. Must operate on stack
# or use effects to produce an output.
prog p-zip-each [
    p-zip-each-rem
    # verify remainder lists are is empty.
    [empty eq] p-each p-suffix
]
macro zip-each [p-zip-each]

# p-zip
#
# Apply operation that returns a new value for each column in a
# row-major list of lists. Returns a list of returned items.
prog p-zip [
    p-dip [swap] p-prefix [swap pushr] p-suffix
    p-zip-each
    [[empty] dip] p-prefix
]
macro zip [p-zip]

assert [
    "foo" "bar" "baz" l3
    [] zip
    "fbb" "oaa" "orz" l3 
    eq
]

# p-zip-each-sc
prog p-zip-each-sc [ p-dip [popl-many] p-prefix p-loop ]
macro zip-each-sc [p-zip-each-sc]

# p-zip-sc
#
# Short-circuiting zip. If this fails at any step, returns the
# partially zipped result and the remaining list of lists.
#
# Remainder is at top of stack. If at least one list in the
# remainder is empty, then loop halted due to reaching end 
# of input.
prog p-zip-sc [
    p-dip [swap] p-prefix [swap pushr] p-suffix
    p-zip-each-sc
    [[empty] dip] p-prefix
]
macro zip-sc [p-zip-sc]

assert [
    "lettuce" "tomato" "bacon" l3 
    [] zip-sc
    pair
    "ltb" "eoa" "tmc" "tao" "utn" l5
    "ce" "o" empty l3
    pair eq
]

# sort  List [LessThan] -- List
# 
# The LessThan operator must work on pairs of values from the
# list and return a boolean value. This should probably be a
# pure function, though that isn't checked here. 
#
# This is a 'stable' sort meaning that partial order is preserved.
# The sort algorithm is currently a merge sort.
#


# sorting lists
# searching lists
# generating lists
# comparing lists (lexicographic)
# matching prefixes or suffixes of lists



