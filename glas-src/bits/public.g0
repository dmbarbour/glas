# Bitstring Manipulation

open prims
import bits-basics as bb
from [bb] import type-bits

# the empty bitstring
data empty [bb/bits-empty]

# pop       Bits -- Bool Bits
#  return head bit and remainder of bits 
prog pop [bb/bits-pop]
prog head [pop drop]
prog tail [pop swap drop]

assert [ 0b100 head 0b1 eq ]
assert [ 0b011 head 0b0 eq ]
assert [ 0b101100 tail 0b01100 eq ]

prog is-bits-impl [
  [[empty eq]                   # until empty
   [[unpair] reject tail]       # verify head is not a pair, take tail.
   until-do
  ] verify             # also, don't modify the input
]
assert [0b1011 is-bits-impl 0b1011 eq]
assert [[1 2 pair is-bits-impl] reject]

# is-bits         Value -- Bits | FAILURE
#   fails if input is not a bitstring.
prog is-bits [[is-bits-impl] 'bits-verify p-accel-opt apply]
assert [0b1011 is-bits 0b1011 eq]
assert [[1 2 pair 'test d1 is-bits] reject]

# TODO: type support


# prefix/suffix - append forms
#    DEF ABC prefix => ABCDEF
#    ABC DEF suffix => ABCDEF
prog prefix [bb/bits-prefix]
prog suffix [bb/bits-suffix]

# append        ABC DEF -- ABCDEF
#   Append two bitstrings. 
prog append [suffix]
assert [0b110100 0b011110 append 0b110100011110 eq]

prog p-each [p-dip [pop] swap p-while-do [empty eq] p-suffix]
prog p-each-while [p-dip [pop] p-prefix p-loop]

# each      Bits [Bit -- ] -- 
#  process each bit sequentially with a given function.
#  entire operation fails if given function fails. This
#  can also serve as a left-fold over bitstrings.
macro each [p-each]

# each-while  Bits [Bit -- | FAIL] -- Bits
#  same as 'each' but will short-circuit the loop if the
#  operation fails. Returns the unprocessed bits.
macro each-while [p-each-while]

# reverse       ABCDEF -- FEDCBA
#   Reverse a bitstring.
prog reverse [bb/bits-reverse]
assert [0b00101101001 reverse 0b10010110100 eq]

# map       Bits [Bit -- Bit] -- Bits
#  apply a function to each bit in a bitstring, 
#  produces a new bitstring.
prog p-map [ 
    p-dip [swap] p-prefix [append] p-suffix 
    p-each
    [empty swap] p-prefix [reverse] p-suffix
]
macro map [p-map]


# negate        Bits -- Bits
#   Negate every bit in the bitstring.
#   Also equivalent to negating a number.
prog negate [bb/bits-negate]
assert [0b00101101001 negate 0b11010010110 eq]

# map2      Bits Bits [Bit Bit -- Bit] -- Bits
#  apply a function to every pair of bits from two bitstrings.
#  fails if bitstrings are of different lengths.
prog p-map2 [
    p-dip [[pop] dip swap] p-prefix [swap] p-suffix 
    p-map 
    [empty eq] p-dip p-suffix
]
macro map2 [p-map2]

# bit-max   Bit Bit -- Bit
#   return maximum of two bits (bit 'or')
prog bit-max [[0b0 eq] [drop2 0b1] try-else]
assert [0b0 0b0 bit-max 0b0 eq]
assert [0b1 0b0 bit-max 0b1 eq]
assert [0b0 0b1 bit-max 0b1 eq]
assert [0b1 0b1 bit-max 0b1 eq]

prog or-impl [ [bit-max] map2 ]

# or       Bits Bits -- Bits
#   bitwise maximum (or bitwise 'or') of two bitstrings
#   requires bitstrings of equal length
prog or [[or-impl] 'bits-or p-accel-opt apply]

prog test-or [
    copy3 [or-impl] dip eq
    copy3 [or] dip eq
    copy3 [swap or-impl] dip eq
          [swap or] dip eq
]
assert [0b0011 0b0110 0b0111 test-or]

# bit-min   Bit Bit -- Bit
#   return minimum of two bits (bit 'and')
prog bit-min [[0b1 eq] [drop2 0b0] try-else]
assert [0b0 0b0 bit-min 0b0 eq]
assert [0b1 0b0 bit-min 0b0 eq]
assert [0b0 0b1 bit-min 0b0 eq]
assert [0b1 0b1 bit-min 0b1 eq]

prog and-impl [ [bit-min] map2 ]

# and       Bits Bits -- Bits
#   bitwise minimum (or bitwise 'and') of two bitstrings
#   requires bitstrings of equal length.
prog and [[and-impl] 'bits-and p-accel-opt apply]

prog test-and [
    copy3 [and-impl] dip eq
    copy3 [and] dip eq
    copy3 [swap and-impl] dip eq
          [swap and] dip eq
]
assert [0b0011 0b0110 0b0010 test-and]

# bit-neq  Bit Bit -- Bit
#   value is 0b1 if bits are the same, 0b1 otherwise
prog bit-neq [[eq 0b0] [drop2 0b1] try-else]
assert [0b0 0b0 bit-neq 0b0 eq]
assert [0b1 0b0 bit-neq 0b1 eq]
assert [0b0 0b1 bit-neq 0b1 eq]
assert [0b1 0b1 bit-neq 0b0 eq]

prog xor-impl [ [bit-neq] map2 ]

# xor       Bits Bits -- Bits
#   bitwise not-equal (or bitwise 'xor') of two bitstrings
#   requires bitstrings of equal length
prog xor [[xor-impl] 'bits-xor p-accel-opt apply]

prog test-xor [
    copy3 [xor-impl] dip eq
    copy3 [xor] dip eq
    copy3 [swap xor-impl] dip eq
          [swap xor] dip eq
]
assert [0b0011 0b0110 0b0101 test-xor]

prog erase-leading-zeroes [ [0b0 get] loop ]
prog erase-leading-ones   [ [0b1 get] loop ]

assert [0b00101 erase-leading-zeroes 0b101   eq]
assert [0b11010 erase-leading-zeroes 0b11010 eq]
assert [0b00101 erase-leading-ones   0b00101 eq]
assert [0b11010 erase-leading-ones   0b010   eq]

prog length-impl [0 swap [tail [bb/int-increment] dip] loop 0 eq]

# length    Bits -- Nat
prog length [[length-impl] 'bits-length p-accel-opt apply]

prog test-length [
    copy2 [length-impl] dip eq
          [length] dip eq
]

assert [empty 0 test-length]
assert [0b001101001 9 test-length]
assert ['length 56 test-length]


prog take-impl [ 
    type-bits
    [empty] dip2
    [pop [prefix] dip] bb/repeat
    drop reverse
]
prog skip-impl [bb/type-bits [tail] bb/repeat ]

# take  Bits N -- Bits
prog take [[take-impl] 'bits-take p-accel-opt apply]

prog test-take [
    copy3 [take-impl] dip eq
          [take] dip eq
]
assert [ 0b1101001 4 0b1101 test-take ]

# skip  Bits N -- Bits
#   drop first N bits from bitstring 
prog skip [[skip-impl] 'bits-skip p-accel-opt apply]

prog test-skip [
    copy3 [skip-impl] dip eq
          [skip] dip eq
]
assert [ 0b0101100010 4 0b100010 test-skip ]

export type-bits as type, is-bits
     , empty, head, tail, pop
     , each, each-while, map, map2
     , append, prefix, suffix
     , reverse, negate, xor, or, and
     , length, take, skip
