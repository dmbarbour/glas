open prims
import bits as b
import bits-basics as bb
from [bb] import
    int-increment as increment,
    int-decrement as decrement,
    bits-negate as negate,
    p-repeat, repeat,
    type-int, type-nat
import nat as n

prog is-int [b/is-bits]

prog is-pos [type-int [0b1 get] verify]
prog is-neg [type-int [0b0 get] verify]
prog is-nat [type-int [0b0 get] reject]
prog is-zero [type-int 0 eq1]


# subtract nat from nat, resulting in integer
prog sub-nn [
    [n/sub]                 # fails for negative result
    [swap n/sub negate]     # (A-B) = -(B-A)
    try-else
]

prog add-impl [
    [[is-neg negate] dip]
    [[is-neg negate]
     [n/add negate]  # neg + neg
     [swap sub-nn]   # neg + pos
     try-then-else
    ]
    [[is-neg negate]
     [sub-nn]        # pos + neg
     [n/add]         # pos + pos
     try-then-else
    ]
    try-then-else
]

# add two integers
prog add [[add-impl] 'int-add p-accel-opt apply]

prog test-add [
    copy3 [add-impl] dip eq
    copy3 [swap add-impl] dip eq
    copy3 [add] dip eq
          [swap add] dip eq
]

assert [-9 19 10 test-add]
assert [-9 -19 -28 test-add]
assert [9 19 28 test-add]
assert [9 -19 -10 test-add]

prog sub-impl [negate add]

# subtract two integers
prog sub [[sub-impl] 'int-sub p-accel-opt apply]

prog test-sub [
    copy3 [sub-impl] dip eq
    copy3 [sub] dip eq
    copy3 [swap sub-impl] dip negate eq
          [swap sub] dip negate eq 
]

assert [19 9 10 test-sub]
assert [19 -9 28 test-sub]
assert [-19 9 -28 test-sub]
assert [-19 -9 -10 test-sub]

prog mul-impl [
    [[is-neg negate] dip]
    [   
        [is-neg negate]
        [n/mul]         # neg * neg
        [n/mul negate]  # neg * pos
        try-then-else
    ]
    [
        [is-neg negate]
        [n/mul negate]  # pos * neg
        [n/mul]         # pos * pos
        try-then-else
    ]
    try-then-else
]

# multiply two integers
prog mul [[mul-impl] 'int-mul p-accel-opt apply]

prog test-mul [
    copy3 [mul-impl] dip eq
    copy3 [swap mul-impl] dip eq
    copy3 [mul] dip eq
          [swap mul] dip eq
]
assert [-3 4 -12 test-mul]
assert [-7 -4 28 test-mul]
assert [9 -7 -63 test-mul]
assert [7 6 42 test-mul]

prog divmod-impl [
    # I currently don't have a good idea how to simplify this.
    # for now, just handling each signs case separately.
    [[is-neg negate] dip]
    [
        [is-neg negate]
        [n/divmod negate] # -17 -5 =>  3 -2
        [ # -17 5 => -4 3
          copy 
          [n/divmod [negate] dip] dip

          swap
          [0 eq]
          [drop 0]
          [n/sub [decrement] dip]
          try-then-else
        ] 
        try-then-else
    ]
    [
        [is-neg negate]
        [ # 17 -5 => -4 -3
          copy 
          [n/divmod [negate] dip] dip

          swap
          [0 eq]
          [drop 0]
          [n/sub negate [decrement] dip]
          try-then-else
        ]
        [n/divmod]
        try-then-else
    ]
    try-then-else
]

# Dividend Divisor -- Quotient Remainder
#   Quotient * Divisor + Remainder = Dividend
#   Remainder in [0,Divisor) or (Divisor,0].
#   A non-zero Remainder has sign of Divisor.
#
#   For example:
#
#      -17 -5 =>  3 -2
#      -17  5 => -4  3
#       17 -5 => -4 -3
#       17  5 =>  3  2
#
prog divmod [[divmod-impl] 'int-divmod p-accel-opt apply]

# need a bit more confidence in divmod...

prog test-divmod [
    pair
    copy3 [divmod-impl pair] dip eq
          [divmod pair] dip eq
]

assert [ 17  5  3  2 test-divmod]
assert [ 17 -5 -4 -3 test-divmod]
assert [-17  5 -4  3 test-divmod]
assert [-17 -5  3 -2 test-divmod]

assert [-4 3 -2 2 test-divmod]
assert [-3 3 -1 0 test-divmod]
assert [-2 3 -1 1 test-divmod]
assert [-1 3 -1 2 test-divmod]
assert [ 0 3  0 0 test-divmod]
assert [ 1 3  0 1 test-divmod]
assert [ 2 3  0 2 test-divmod]
assert [ 3 3  1 0 test-divmod]
assert [ 4 3  1 1 test-divmod]

assert [-4 -3  1 -1 test-divmod]
assert [-3 -3  1  0 test-divmod]
assert [-2 -3  0 -2 test-divmod]
assert [-1 -3  0 -1 test-divmod]
assert [ 0 -3  0  0 test-divmod]
assert [ 1 -3 -1 -2 test-divmod]
assert [ 2 -3 -1 -1 test-divmod]
assert [ 3 -3 -1  0 test-divmod]
assert [ 4 -3 -2 -2 test-divmod]

assert [-100 -1 100 0 test-divmod]
assert [100 -1 -100 0 test-divmod]
assert [-100 1 -100 0 test-divmod]

prog div [ divmod drop ]
prog mod [ divmod swap drop ]

prog gt-impl  [[sub 0b1 get] verify]
prog gte-impl [[sub is-nat] verify]

prog gte [[gte-impl] 'int-gte p-accel-opt apply]
prog gt [[gt-impl] 'int-gt p-accel-opt apply]
prog lte [swap gte]
prog lt [swap gt]

export 
    add, sub, mul, 
    divmod, div, mod,
    increment, decrement, negate,
    repeat, p-repeat, 
    type-int as type,
    is-pos, is-neg, is-nat, is-zero
